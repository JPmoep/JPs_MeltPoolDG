# Listing of Parameters
# ---------------------
subsection adaptive meshing
  # Sets this parameter to true to activate adaptive meshing
  set do amr                    = false

  # Defines the (lower) percentage of elements that should be coarsened
  set lower perc to coarsen     = 0

  # Defines the number of maximum refinement steps one grid cell will be
  # undergone.
  set max grid refinement level = 12

  # Defines the (upper) percentage of elements that should be refined
  set upper perc to refine      = 0
end


subsection advection diffusion
  # Defines the diffusivity for the advection diffusion equation
  set advec diff diffusivity             = 0

  # Set this parameter if a matrix free solution procedure should be
  # performed
  set advec diff do matrix free          = false

  # Defines if the l2norm of the advected field should be printed).
  set advec diff do print l2norm         = true

  # Sets the end time for the solution of the advection diffusion problem
  set advec diff end time                = 1

  # Choose the corresponding implementation of the advection diffusion
  # operation.
  set advec diff implementation          = meltpooldg

  # Sets the maximum number of advection diffusion steps
  set advec diff max n steps             = 1000000

  # Defines the start time for the solution of the levelset problem
  set advec diff start time              = 0

  # Determines the time integration scheme.
  set advec diff time integration scheme = crank_nicolson

  # Sets the step size for time stepping. For non-uniform time stepping, this
  # parameter determines the size of the first time step.
  set advec diff time step size          = 0.01
end


subsection base
  # Sets the base name for the application that will be fed to the problem
  # type.
  set application name    = vortex_bubble # default: none

  # Defines the interpolation degree
  set degree              = 1

  # Defines the dimension of the problem
  set dimension           = 2

  # Sets this parameter to true to list parameters in output
  set do print parameters = true

  # Use simplices
  set do simplex          = false

  # Defines the number of initial global refinements
  set global refinements  = 5             # default: 1

  # Set the value for the gravity
  set gravity             = 0

  # Defines the number of quadrature points
  set n q points 1d       = -1

  # Sets the base name for the problem that should be solved.
  set problem name        = level_set     # default: advection_diffusion
end


subsection curvature
  # curvature computation: damping = cell_size * curv_damping_scale_factor
  set curv damping scale factor = 0

  # Set this parameter if a matrix free solution procedure should be
  # performed
  set curv do matrix free       = false

  # Defines if the l2norm of the curvature result should be printed)
  set curv do print l2norm      = true

  # Choose the corresponding implementation of the curvature operation.
  set curv implementation       = meltpooldg
end


subsection flow
  # density of the flow field
  set flow density                                           = -1

  # density difference of the two-phase flow field
  set flow density difference                                = 0

  # Sets the end time for the solution of the levelset problem
  set flow end time                                          = 1

  # Sets the maximum number of flow steps
  set flow max n steps                                       = 1000000

  # number of 1d quadrature points for the velocity field of the flow
  set flow n q points 1d                                     = -1

  # solver type of the flow problem
  set flow solver type                                       = incompressible

  # Defines the start time for the solution of the levelset problem
  set flow start time                                        = 0

  # constant coefficient for calculating surface tension
  set flow surface tension coefficient                       = 0

  # Reference temperature for calculating surface tension
  set flow surface tension reference temperature             = 0

  # temperature dependent coefficient for calculating temperetaure-dependent
  # surface tension (Marangoni convection)
  set flow temperature dependent surface tension coefficient = 0

  # Sets the step size for time stepping. For non-uniform time stepping, this
  # parameter determines the size of the first time step.
  set flow time step size                                    = 0.05

  # velocity degree of the flow field
  set flow velocity degree                                   = -1

  # viscosity of the flow field
  set flow viscosity                                         = -1

  # viscosity difference of the two-phase flow field
  set flow viscosity difference                              = 0
end


subsection levelset
  # Defines the artificial diffusivity for the level set transport equation
  set ls artificial diffusivity  = 0.0            # default: 0

  # Set this parameter to true if in areas outside the interface region a
  # correction of the curvature values should be applied. This parameter can
  # be helpful to avoid numerical instabilities.
  set ls do curvature correction = false

  # Set this parameter if a matrix free solution procedure should be
  # performed
  set ls do matrix free          = true           # default: false

  # Defines if the l2norm of the levelset result should be printed)
  set ls do print l2norm         = true           # default: false

  # Defines if reinitialization of level set function is activated
  set ls do reinitialization     = true           # default: false

  # Enables to dynamically adapt the time step to meet the CFL condition in
  # case of explicit time integration.
  set ls enable CFL condition    = false

  # Sets the end time for the solution of the levelset problem
  set ls end time                = 0.05           # default: 1

  # Choose the corresponding implementation of the ls operation.
  set ls implementation          = adaflo         # default: meltpooldg

  # Defines the start time for the solution of the levelset problem
  set ls start time              = 0.0            # default: 0

  # Determines the time integration scheme.
  set ls time integration scheme = crank_nicolson

  # Sets the step size for time stepping. For non-uniform time stepping, this
  # parameter determines the size of the first time step.
  set ls time step size          = 0.01
end


subsection melt pool
  # Ambient temperature in the inert gas.
  set mp ambient temperature                  = 0

  # Boiling temperature of the melt.
  set mp boiling temperature                  = 0

  # Set this parameter to true to move the laser in x-direction with the given
  # parameter scan speed (in case of an analytical temperature field).
  set mp do move laser                        = false

  # Defines if the l2norm of the melt pool results should be printed)
  set mp do print l2norm                      = true

  # maximum x coordinate of simulation domain
  set mp domain x max                         = 0

  # minimum x coordinate of simulation domain
  set mp domain x min                         = 0

  # maximum y coordinate of simulation domain
  set mp domain y max                         = 0

  # minimum y coordinate of simulation domain
  set mp domain y min                         = 0

  # Absorptivity of the gaseous part of domain
  set mp gas absorptivity                     = 0

  # Capacity of the gaseous part of domain
  set mp gas capacity                         = 0

  # Conductivity of the gaseous part of domain
  set mp gas conductivity                     = 0

  # Center coordinates of the laser beam on the interface melt/gas.
  set mp laser center                         = 0,0,0

  # Intensity of the laser
  set mp laser power                          = 0

  # Absorptivity of the liquid part of domain
  set mp liquid absorptivity                  = 0

  # Capacity of the liquid part of domain
  set mp liquid capacity                      = 0

  # Conductivity of the liquid part of domain
  set mp liquid conductivity                  = 0

  # Set the depth of the liquid parts of the melt pool ellipse
  set mp liquid melt pool depth               = 0

  # Set the radius of the liquid parts of the melt pool ellipse  or the width
  # of the parabola
  set mp liquid melt pool radius              = 0

  # Melting point of the liquid part of domain
  set mp liquid melting point                 = 0

  # Maximum temperature arising in the melt pool. If this temperature is lower
  # than the boiling temperature, this value is corrected to correspond to the
  # boiling temperature + 500 K.
  set mp max temperature                      = 0

  # Center coordinates of the melt pool ellipse/parabola. If no value is
  # provided it will be set equally to the laser center
  set mp melt pool center                     = not_initialized

  # Shape of the user defined melt pool
  set mp melt pool shape                      = ellipse

  # Pressure constant for the recoil pressure model.
  set mp recoil pressure constant             = 0

  # Temperature constant for the recoil pressure model.
  set mp recoil pressure temperature constant = 0

  # Scan speed of the laser (in case of an analytical temperature field).
  set mp scan speed                           = 0

  # Definition type of the temperature field: (1) analytical expression (2)
  # solve heat equation (not implemented yet)
  set mp temperature formulation              = analytical

  # This factor scales the analytical temperature field to be anisotropic.
  set mp temperature x to y ratio             = 1
end


subsection normal vector
  # normal vector computation: damping = cell_size *
  # normal_vec_damping_scale_factor
  set normal vec damping scale factor = 0.5

  # Set this parameter if a matrix free solution procedure should be
  # performed
  set normal vec do matrix free       = true   # default: false

  # Defines if the l2norm of the normal vector result should be printed)
  set normal vec do print l2norm      = true

  # Choose the corresponding implementation of the normal vector operation.
  set normal vec implementation       = adaflo # default: meltpooldg
end


subsection output
  # this flag enables the computation of the error compared to a given
  # analytical solution.
  set do compute error         = false

  # boolean for computing the phase volumes
  set do compute volume output = false

  # this flag enables the output of wall times (should be disabled if a test
  # file is prepared)
  set do walltime              = false

  # Sets the base name for the volume fraction file output.
  set filename volume output   = my_volumes.txt
end


subsection paraview
  # boolean for writing the initial state into the paraview output file
  set paraview do initial state    = true

  # boolean for producing paraview output files
  set paraview do output           = false

  # Sets the base name for the paraview file output.
  set paraview filename            = solution

  # number of digits for the frame number of the vtk-file.
  set paraview n digits timestep   = 4

  # number of parallel written vtk-files.
  set paraview n groups            = 4

  # boolean for writing the computed advection into the paraview output file
  set paraview print advection     = false

  # boolean for printing a vtk-file with the boundary id
  set paraview print boundary id   = false

  # boolean for writing the computed curvature into the paraview output file
  set paraview print curvature     = false

  # boolean for writing the exact solution into the paraview output file
  set paraview print exactsolution = false

  # boolean for writing the levelset variable into the paraview output file
  set paraview print levelset      = true

  # boolean for writing the computed normalvector into the paraview output
  # file
  set paraview print normal vector = false

  # every n timestep that should be written
  set paraview write frequency     = 1
end


subsection reinitialization
  # Defines the length parameter of the level set function to be constant
  # andnot to dependent on the mesh size (default: -1.0 i.e. grid size
  # dependentwhich can be controlled by reinit_epsilon_scale_factor
  set reinit constant epsilon     = -1

  # Set this parameter if a matrix free solution procedure should be
  # performed
  set reinit do matrix free       = true

  # Defines if the l2norm of the reinitialization result should be printed)
  set reinit do print l2norm      = true       # default: false

  # Defines the time step size of the reinitialization to be constant andnot
  # to dependent on the mesh size (default: -1.0 i.e. grid size dependent
  set reinit dtau                 = -1

  # Choose the corresponding implementation of the reinitialization
  # operation.
  set reinit implementation       = adaflo     # default: meltpooldg

  # Set the maximum number of iterations for solving the linear system of
  # equations.
  set reinit max iterations       = 10000

  # Sets the maximum number of reinitialization steps
  set reinit max n steps          = 5

  # Sets the type of reinitialization model that should be used.
  set reinit modeltype            = olsson2007

  # Set this parameter for choosing a preconditioner type
  set reinit preconditioner type  = Identity

  # Set the relative tolerance for a successful solution of the linear system
  # of equations.
  set reinit rel tolerance rhs    = 1e-08

  # Defines the scaling factor of the diffusion parameter in the
  # reinitialization equation; the scaling factor is multipled by the mesh
  # size (default: 0.5 i.e. eps=0.5*h_min
  set reinit scale factor epsilon = 0.5

  # Set this parameter for choosing a solver type. At the moment GMRES or CG
  # solvers  are supported
  set reinit solver type          = GMRES
end


    | reini: τ= 0.015625    reinitialize ( |n|_0=0.5979732183    |n|_1=0.4870778285   
11)
	 |ΔΨ|∞ = 0.7269708528    |ΔΨ|²/dT = 249.0284694    |
    | reini: τ= 0.03125    and reinitialize (11)
	 |ΔΨ|∞ = 0.3568488858    |ΔΨ|²/dT = 112.6144814    |
    | reini: τ= 0.046875   and reinitialize (11)
	 |ΔΨ|∞ = 0.1852949987    |ΔΨ|²/dT = 57.57324789    |
    | reini: τ= 0.0625     and reinitialize (11)
	 |ΔΨ|∞ = 0.1053965277    |ΔΨ|²/dT = 34.99827668    |
    | reini: τ= 0.078125   and reinitialize (11)
	 |ΔΨ|∞ = 0.06643516828   |ΔΨ|²/dT = 24.43756141    |
| normal vector:         i=14 	|n_0| = 105.8300615    |n_1| = 106.09825083   
| curvature:         i=32 	|k| = 1569.8066338   
| ls: t= 0.01      | GMRES: i=23   	 |ϕ|2 = 31.86070138    
    | reini: τ= 0.015625   and reinitialize ( |n|_0=0.5879323695    |n|_1=0.474258773    
11)
	 |ΔΨ|∞ = 0.0514070997    |ΔΨ|²/dT = 18.74646915    |
    | reini: τ= 0.03125    and reinitialize (11)
	 |ΔΨ|∞ = 0.03914238811   |ΔΨ|²/dT = 14.74738329    |
    | reini: τ= 0.046875   and reinitialize (11)
	 |ΔΨ|∞ = 0.03057242134   |ΔΨ|²/dT = 12.00368207    |
    | reini: τ= 0.0625     and reinitialize (11)
	 |ΔΨ|∞ = 0.02492947698   |ΔΨ|²/dT = 9.979637049    |
    | reini: τ= 0.078125   and reinitialize (11)
	 |ΔΨ|∞ = 0.02096371775   |ΔΨ|²/dT = 8.422629252    |
| normal vector:         i=14 	|n_0| = 98.147309137   |n_1| = 98.558596027   
| curvature:         i=31 	|k| = 1256.2484353   
| ls: t= 0.02      | GMRES: i=21   	 |ϕ|2 = 31.6124497     
    | reini: τ= 0.015625   and reinitialize ( |n|_0=0.5838445269    |n|_1=0.4695193611   
11)
	 |ΔΨ|∞ = 0.03276543851   |ΔΨ|²/dT = 8.29392496     |
    | reini: τ= 0.03125    and reinitialize (11)
	 |ΔΨ|∞ = 0.01774803864   |ΔΨ|²/dT = 6.525864151    |
    | reini: τ= 0.046875   and reinitialize (11)
	 |ΔΨ|∞ = 0.0149221155    |ΔΨ|²/dT = 5.569460515    |
    | reini: τ= 0.0625     and reinitialize (11)
	 |ΔΨ|∞ = 0.01271329208   |ΔΨ|²/dT = 4.830443736    |
    | reini: τ= 0.078125   and reinitialize (11)
	 |ΔΨ|∞ = 0.01093376555   |ΔΨ|²/dT = 4.221720583    |
| normal vector:         i=14 	|n_0| = 95.011010456   |n_1| = 95.179060404   
| curvature:         i=31 	|k| = 1193.237508    
| ls: t= 0.03      | GMRES: i=21   	 |ϕ|2 = 31.50045039    
    | reini: τ= 0.015625   and reinitialize ( |n|_0=0.5812509504    |n|_1=0.4671356198   
11)
	 |ΔΨ|∞ = 0.03573235977   |ΔΨ|²/dT = 5.965569191    |
    | reini: τ= 0.03125    and reinitialize (11)
	 |ΔΨ|∞ = 0.01156044843   |ΔΨ|²/dT = 3.819126537    |
    | reini: τ= 0.046875   and reinitialize (11)
	 |ΔΨ|∞ = 0.009301748211  |ΔΨ|²/dT = 3.206924659    |
    | reini: τ= 0.0625     and reinitialize (11)
	 |ΔΨ|∞ = 0.008031717607  |ΔΨ|²/dT = 2.808933144    |
    | reini: τ= 0.078125   and reinitialize (11)
	 |ΔΨ|∞ = 0.006992588133  |ΔΨ|²/dT = 2.485630892    |
| normal vector:         i=14 	|n_0| = 93.657885139   |n_1| = 93.283105463   
| curvature:         i=32 	|k| = 1251.0114017   
| ls: t= 0.04      | GMRES: i=21   	 |ϕ|2 = 31.44197791    
    | reini: τ= 0.015625   and reinitialize ( |n|_0=0.5792924619    |n|_1=0.4659161931   
11)
	 |ΔΨ|∞ = 0.03526263901   |ΔΨ|²/dT = 5.424833758    |
    | reini: τ= 0.03125    and reinitialize (11)
	 |ΔΨ|∞ = 0.01106104226   |ΔΨ|²/dT = 2.74473939     |
    | reini: τ= 0.046875   and reinitialize (11)
	 |ΔΨ|∞ = 0.006884865799  |ΔΨ|²/dT = 2.18690554     |
    | reini: τ= 0.0625     and reinitialize (11)
	 |ΔΨ|∞ = 0.006023936484  |ΔΨ|²/dT = 1.910730949    |
    | reini: τ= 0.078125   and reinitialize (11)
	 |ΔΨ|∞ = 0.005311711093  |ΔΨ|²/dT = 1.699119016    |
| normal vector:         i=15 	|n_0| = 93.20882582    |n_1| = 92.020474269   
| curvature:         i=31 	|k| = 1200.1075249   
| ls: t= 0.05      | GMRES: i=21   	 |ϕ|2 = 31.40919621    
    | reini: τ= 0.015625   and reinitialize ( |n|_0=0.5776168485    |n|_1=0.4653533026   
11)
	 |ΔΨ|∞ = 0.03362092818   |ΔΨ|²/dT = 5.319782499    |
    | reini: τ= 0.03125    and reinitialize (11)
	 |ΔΨ|∞ = 0.01045635838   |ΔΨ|²/dT = 2.349424263    |
    | reini: τ= 0.046875   and reinitialize (11)
	 |ΔΨ|∞ = 0.006058696397  |ΔΨ|²/dT = 1.779233904    |
    | reini: τ= 0.0625     and reinitialize (11)
	 |ΔΨ|∞ = 0.005398342107  |ΔΨ|²/dT = 1.546467376    |
    | reini: τ= 0.078125   and reinitialize (11)
	 |ΔΨ|∞ = 0.004858707995  |ΔΨ|²/dT = 1.378879004    |
| normal vector:         i=15 	|n_0| = 93.285047626   |n_1| = 91.032753661   
| curvature:         i=31 	|k| = 1184.8436746   
