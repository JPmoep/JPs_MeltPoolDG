# Listing of Parameters
# ---------------------
subsection adaptive meshing
  # Sets this parameter to true to activate adaptive meshing
  set do amr                    = false

  # Defines the (lower) percentage of elements that should be coarsened
  set lower perc to coarsen     = 0

  # Defines the number of maximum refinement steps one grid cell will be
  # undergone.
  set max grid refinement level = 12

  # Defines the (upper) percentage of elements that should be refined
  set upper perc to refine      = 0
end


subsection advection diffusion
  # Defines the diffusivity for the advection diffusion equation
  set advec diff diffusivity             = 0

  # Set this parameter if a matrix free solution procedure should be
  # performed
  set advec diff do matrix free          = false

  # Defines if the l2norm of the advected field should be printed).
  set advec diff do print l2norm         = true

  # Sets the end time for the solution of the advection diffusion problem
  set advec diff end time                = 1

  # Choose the corresponding implementation of the advection diffusion
  # operation.
  set advec diff implementation          = meltpooldg

  # Sets the maximum number of advection diffusion steps
  set advec diff max n steps             = 1000000

  # Defines the start time for the solution of the levelset problem
  set advec diff start time              = 0

  # Determines the time integration scheme.
  set advec diff time integration scheme = crank_nicolson

  # Sets the step size for time stepping. For non-uniform time stepping, this
  # parameter determines the size of the first time step.
  set advec diff time step size          = 0.01
end


subsection base
  # Sets the base name for the application that will be fed to the problem
  # type.
  set application name    = vortex_bubble # default: none

  # Defines the interpolation degree
  set degree              = 1

  # Defines the dimension of the problem
  set dimension           = 2

  # Sets this parameter to true to list parameters in output
  set do print parameters = true

  # Use simplices
  set do simplex          = false

  # Defines the number of initial global refinements
  set global refinements  = 5             # default: 1

  # Set the value for the gravity
  set gravity             = 0

  # Defines the number of quadrature points
  set n q points 1d       = -1

  # Sets the base name for the problem that should be solved.
  set problem name        = level_set     # default: advection_diffusion
end


subsection curvature
  # curvature computation: damping = cell_size * curv_damping_scale_factor
  set curv damping scale factor = 0

  # Set this parameter if a matrix free solution procedure should be
  # performed
  set curv do matrix free       = false

  # Defines if the l2norm of the curvature result should be printed)
  set curv do print l2norm      = true

  # Choose the corresponding implementation of the curvature operation.
  set curv implementation       = meltpooldg
end


subsection flow
  # density of the flow field
  set flow density                                           = -1

  # density difference of the two-phase flow field
  set flow density difference                                = 0

  # Sets the end time for the solution of the levelset problem
  set flow end time                                          = 1

  # Sets the maximum number of flow steps
  set flow max n steps                                       = 1000000

  # number of 1d quadrature points for the velocity field of the flow
  set flow n q points 1d                                     = -1

  # solver type of the flow problem
  set flow solver type                                       = incompressible

  # Defines the start time for the solution of the levelset problem
  set flow start time                                        = 0

  # constant coefficient for calculating surface tension
  set flow surface tension coefficient                       = 0

  # Reference temperature for calculating surface tension
  set flow surface tension reference temperature             = 0

  # temperature dependent coefficient for calculating temperetaure-dependent
  # surface tension (Marangoni convection)
  set flow temperature dependent surface tension coefficient = 0

  # Sets the step size for time stepping. For non-uniform time stepping, this
  # parameter determines the size of the first time step.
  set flow time step size                                    = 0.05

  # velocity degree of the flow field
  set flow velocity degree                                   = -1

  # viscosity of the flow field
  set flow viscosity                                         = -1

  # viscosity difference of the two-phase flow field
  set flow viscosity difference                              = 0
end


subsection levelset
  # Defines the artificial diffusivity for the level set transport equation
  set ls artificial diffusivity  = 0.0            # default: 0

  # Set this parameter to true if in areas outside the interface region a
  # correction of the curvature values should be applied. This parameter can
  # be helpful to avoid numerical instabilities.
  set ls do curvature correction = false

  # Set this parameter if a matrix free solution procedure should be
  # performed
  set ls do matrix free          = true           # default: false

  # Defines if the l2norm of the levelset result should be printed)
  set ls do print l2norm         = true           # default: false

  # Defines if reinitialization of level set function is activated
  set ls do reinitialization     = true           # default: false

  # Enables to dynamically adapt the time step to meet the CFL condition in
  # case of explicit time integration.
  set ls enable CFL condition    = false

  # Sets the end time for the solution of the levelset problem
  set ls end time                = 0.05           # default: 1

  # Choose the corresponding implementation of the ls operation.
  set ls implementation          = meltpooldg

  # Defines the start time for the solution of the levelset problem
  set ls start time              = 0.0            # default: 0

  # Determines the time integration scheme.
  set ls time integration scheme = crank_nicolson

  # Sets the step size for time stepping. For non-uniform time stepping, this
  # parameter determines the size of the first time step.
  set ls time step size          = 0.01
end


subsection melt pool
  # Ambient temperature in the inert gas.
  set mp ambient temperature                  = 0

  # Boiling temperature of the melt.
  set mp boiling temperature                  = 0

  # Set this parameter to true to move the laser in x-direction with the given
  # parameter scan speed (in case of an analytical temperature field).
  set mp do move laser                        = false

  # Defines if the l2norm of the melt pool results should be printed)
  set mp do print l2norm                      = true

  # maximum x coordinate of simulation domain
  set mp domain x max                         = 0

  # minimum x coordinate of simulation domain
  set mp domain x min                         = 0

  # maximum y coordinate of simulation domain
  set mp domain y max                         = 0

  # minimum y coordinate of simulation domain
  set mp domain y min                         = 0

  # Absorptivity of the gaseous part of domain
  set mp gas absorptivity                     = 0

  # Capacity of the gaseous part of domain
  set mp gas capacity                         = 0

  # Conductivity of the gaseous part of domain
  set mp gas conductivity                     = 0

  # Center coordinates of the laser beam on the interface melt/gas.
  set mp laser center                         = 0,0,0

  # Intensity of the laser
  set mp laser power                          = 0

  # Absorptivity of the liquid part of domain
  set mp liquid absorptivity                  = 0

  # Capacity of the liquid part of domain
  set mp liquid capacity                      = 0

  # Conductivity of the liquid part of domain
  set mp liquid conductivity                  = 0

  # Set the depth of the liquid parts of the melt pool ellipse
  set mp liquid melt pool depth               = 0

  # Set the radius of the liquid parts of the melt pool ellipse  or the width
  # of the parabola
  set mp liquid melt pool radius              = 0

  # Melting point of the liquid part of domain
  set mp liquid melting point                 = 0

  # Maximum temperature arising in the melt pool. If this temperature is lower
  # than the boiling temperature, this value is corrected to correspond to the
  # boiling temperature + 500 K.
  set mp max temperature                      = 0

  # Center coordinates of the melt pool ellipse/parabola. If no value is
  # provided it will be set equally to the laser center
  set mp melt pool center                     = not_initialized

  # Shape of the user defined melt pool
  set mp melt pool shape                      = ellipse

  # Pressure constant for the recoil pressure model.
  set mp recoil pressure constant             = 0

  # Temperature constant for the recoil pressure model.
  set mp recoil pressure temperature constant = 0

  # Scan speed of the laser (in case of an analytical temperature field).
  set mp scan speed                           = 0

  # Definition type of the temperature field: (1) analytical expression (2)
  # solve heat equation (not implemented yet)
  set mp temperature formulation              = analytical

  # This factor scales the analytical temperature field to be anisotropic.
  set mp temperature x to y ratio             = 1
end


subsection normal vector
  # normal vector computation: damping = cell_size *
  # normal_vec_damping_scale_factor
  set normal vec damping scale factor = 0.5

  # Set this parameter if a matrix free solution procedure should be
  # performed
  set normal vec do matrix free       = true       # default: false

  # Defines if the l2norm of the normal vector result should be printed)
  set normal vec do print l2norm      = true

  # Choose the corresponding implementation of the normal vector operation.
  set normal vec implementation       = meltpooldg
end


subsection output
  # this flag enables the computation of the error compared to a given
  # analytical solution.
  set do compute error         = false

  # boolean for computing the phase volumes
  set do compute volume output = false

  # this flag enables the output of wall times (should be disabled if a test
  # file is prepared)
  set do walltime              = false

  # Sets the base name for the volume fraction file output.
  set filename volume output   = my_volumes.txt
end


subsection paraview
  # boolean for writing the initial state into the paraview output file
  set paraview do initial state    = true

  # boolean for producing paraview output files
  set paraview do output           = false

  # Sets the base name for the paraview file output.
  set paraview filename            = solution

  # number of digits for the frame number of the vtk-file.
  set paraview n digits timestep   = 4

  # number of parallel written vtk-files.
  set paraview n groups            = 4

  # boolean for writing the computed advection into the paraview output file
  set paraview print advection     = false

  # boolean for printing a vtk-file with the boundary id
  set paraview print boundary id   = false

  # boolean for writing the computed curvature into the paraview output file
  set paraview print curvature     = false

  # boolean for writing the exact solution into the paraview output file
  set paraview print exactsolution = false

  # boolean for writing the levelset variable into the paraview output file
  set paraview print levelset      = true

  # boolean for writing the computed normalvector into the paraview output
  # file
  set paraview print normal vector = false

  # every n timestep that should be written
  set paraview write frequency     = 1
end


subsection reinitialization
  # Defines the length parameter of the level set function to be constant
  # andnot to dependent on the mesh size (default: -1.0 i.e. grid size
  # dependentwhich can be controlled by reinit_epsilon_scale_factor
  set reinit constant epsilon     = -1

  # Set this parameter if a matrix free solution procedure should be
  # performed
  set reinit do matrix free       = true

  # Defines if the l2norm of the reinitialization result should be printed)
  set reinit do print l2norm      = true       # default: false

  # Defines the time step size of the reinitialization to be constant andnot
  # to dependent on the mesh size (default: -1.0 i.e. grid size dependent
  set reinit dtau                 = -1

  # Choose the corresponding implementation of the reinitialization
  # operation.
  set reinit implementation       = meltpooldg

  # Set the maximum number of iterations for solving the linear system of
  # equations.
  set reinit max iterations       = 10000

  # Sets the maximum number of reinitialization steps
  set reinit max n steps          = 5

  # Sets the type of reinitialization model that should be used.
  set reinit modeltype            = olsson2007

  # Set this parameter for choosing a preconditioner type
  set reinit preconditioner type  = Identity

  # Set the relative tolerance for a successful solution of the linear system
  # of equations.
  set reinit rel tolerance rhs    = 1e-08

  # Defines the scaling factor of the diffusion parameter in the
  # reinitialization equation; the scaling factor is multipled by the mesh
  # size (default: 0.5 i.e. eps=0.5*h_min
  set reinit scale factor epsilon = 0.5

  # Set this parameter for choosing a solver type. At the moment GMRES or CG
  # solvers  are supported
  set reinit solver type          = GMRES
end


| normal vector:         i=14 	|n_0| = 150.42501476   |n_1| = 150.43734066   
    | reini: τ= 0.015625  | CG: i=18   	 |ΔΨ|∞ = 0.5939307545    |ΔΨ|²/dT = 209.1759404    |
    | reini: τ= 0.03125   | CG: i=18   	 |ΔΨ|∞ = 0.3215636838    |ΔΨ|²/dT = 105.0360118    |
    | reini: τ= 0.046875  | CG: i=18   	 |ΔΨ|∞ = 0.156794635     |ΔΨ|²/dT = 50.30460027    |
    | reini: τ= 0.0625    | CG: i=18   	 |ΔΨ|∞ = 0.07701942664   |ΔΨ|²/dT = 24.80278761    |
    | reini: τ= 0.078125  | CG: i=18   	 |ΔΨ|∞ = 0.04089011416   |ΔΨ|²/dT = 13.31810634    |
| normal vector:         i=14 	|n_0| = 117.98857449   |n_1| = 118.02710499   
| curvature:         i=33 	|k| = 1935.7721194   
| ls: t= 0.01      | GMRES: i=25   	 |ϕ|2 = 32.23150653    
| normal vector:         i=14 	|n_0| = 118.10136607   |n_1| = 117.95434601   
    | reini: τ= 0.015625  | CG: i=19   	 |ΔΨ|∞ = 0.04305253071   |ΔΨ|²/dT = 10.60994515    |
    | reini: τ= 0.03125   | CG: i=19   	 |ΔΨ|∞ = 0.02972914795   |ΔΨ|²/dT = 7.211358933    |
    | reini: τ= 0.046875  | CG: i=19   	 |ΔΨ|∞ = 0.02246456711   |ΔΨ|²/dT = 5.420450138    |
    | reini: τ= 0.0625    | CG: i=19   	 |ΔΨ|∞ = 0.01851646621   |ΔΨ|²/dT = 4.361553011    |
    | reini: τ= 0.078125  | CG: i=18   	 |ΔΨ|∞ = 0.01565589722   |ΔΨ|²/dT = 3.667970036    |
| normal vector:         i=14 	|n_0| = 117.13939348   |n_1| = 117.03231358   
| curvature:         i=31 	|k| = 1428.9380782   
| ls: t= 0.02      | GMRES: i=24   	 |ϕ|2 = 32.19571233    
| normal vector:         i=14 	|n_0| = 117.46528199   |n_1| = 116.80912721   
    | reini: τ= 0.015625  | CG: i=19   	 |ΔΨ|∞ = 0.02731309054   |ΔΨ|²/dT = 5.998184997    |
    | reini: τ= 0.03125   | CG: i=19   	 |ΔΨ|∞ = 0.01958534514   |ΔΨ|²/dT = 4.477656941    |
    | reini: τ= 0.046875  | CG: i=19   	 |ΔΨ|∞ = 0.01637266446   |ΔΨ|²/dT = 3.596061338    |
    | reini: τ= 0.0625    | CG: i=19   	 |ΔΨ|∞ = 0.01363359144   |ΔΨ|²/dT = 2.996171023    |
    | reini: τ= 0.078125  | CG: i=19   	 |ΔΨ|∞ = 0.01136788295   |ΔΨ|²/dT = 2.549329712    |
| normal vector:         i=14 	|n_0| = 117.3668953    |n_1| = 116.7783744    
| curvature:         i=32 	|k| = 1492.2520231   
| ls: t= 0.03      | GMRES: i=24   	 |ϕ|2 = 32.19062448    
| normal vector:         i=14 	|n_0| = 117.9019573    |n_1| = 116.40649594   
    | reini: τ= 0.015625  | CG: i=19   	 |ΔΨ|∞ = 0.01806591005   |ΔΨ|²/dT = 4.676321222    |
    | reini: τ= 0.03125   | CG: i=19   	 |ΔΨ|∞ = 0.01398305753   |ΔΨ|²/dT = 3.325488105    |
    | reini: τ= 0.046875  | CG: i=19   	 |ΔΨ|∞ = 0.01126156441   |ΔΨ|²/dT = 2.599859933    |
    | reini: τ= 0.0625    | CG: i=19   	 |ΔΨ|∞ = 0.009316373078  |ΔΨ|²/dT = 2.125406468    |
    | reini: τ= 0.078125  | CG: i=19   	 |ΔΨ|∞ = 0.007847280492  |ΔΨ|²/dT = 1.778879016    |
| normal vector:         i=14 	|n_0| = 117.8617883    |n_1| = 116.45691309   
| curvature:         i=32 	|k| = 1471.0919544   
| ls: t= 0.04      | GMRES: i=23   	 |ϕ|2 = 32.18948498    
| normal vector:         i=14 	|n_0| = 118.60068166   |n_1| = 115.93913427   
    | reini: τ= 0.015625  | CG: i=19   	 |ΔΨ|∞ = 0.01519356918   |ΔΨ|²/dT = 3.801453265    |
    | reini: τ= 0.03125   | CG: i=19   	 |ΔΨ|∞ = 0.010935729     |ΔΨ|²/dT = 2.538484446    |
    | reini: τ= 0.046875  | CG: i=18   	 |ΔΨ|∞ = 0.008707122813  |ΔΨ|²/dT = 1.908036338    |
    | reini: τ= 0.0625    | CG: i=18   	 |ΔΨ|∞ = 0.007225281454  |ΔΨ|²/dT = 1.52694921     |
    | reini: τ= 0.078125  | CG: i=18   	 |ΔΨ|∞ = 0.006063036348  |ΔΨ|²/dT = 1.263798791    |
| normal vector:         i=14 	|n_0| = 118.52958141   |n_1| = 115.97689438   
| curvature:         i=32 	|k| = 1459.2070224   
| ls: t= 0.05      | GMRES: i=23   	 |ϕ|2 = 32.18862846    
| normal vector:         i=14 	|n_0| = 119.46456643   |n_1| = 115.31781573   
    | reini: τ= 0.015625  | CG: i=19   	 |ΔΨ|∞ = 0.0129681481    |ΔΨ|²/dT = 3.357445219    |
    | reini: τ= 0.03125   | CG: i=18   	 |ΔΨ|∞ = 0.009560460075  |ΔΨ|²/dT = 2.076116051    |
    | reini: τ= 0.046875  | CG: i=18   	 |ΔΨ|∞ = 0.007272669722  |ΔΨ|²/dT = 1.486982586    |
    | reini: τ= 0.0625    | CG: i=18   	 |ΔΨ|∞ = 0.005782658559  |ΔΨ|²/dT = 1.164666305    |
    | reini: τ= 0.078125  | CG: i=18   	 |ΔΨ|∞ = 0.004790113301  |ΔΨ|²/dT = 0.9570729696   |
| normal vector:         i=14 	|n_0| = 119.3604828    |n_1| = 115.34184606   
| curvature:         i=31 	|k| = 1472.9814408   
